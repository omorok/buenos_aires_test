# -*- coding: utf-8 -*-
"""buenos_aires.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XAbD7IJT1OzqmVxQq5-wzOfilWCj_Ytq

# Library installing
"""

!pip install fiona

!pip install pyproj

!pip install rtree

!pip install shapely

!pip install geopandas

import pandas as pd
import geopandas as gpd

"""# Ingestion and dataprep

custom functions
"""

def replacer(dataCol):
  lista = []
  for k in dataCol:
    k = str(k)
    k = k.replace(',','.')
    k = float(k)
    lista.append(k)
  return lista

from dateutil.parser import parse
import datetime

def clean_date(darray,form):
  l = []
  for k in darray:
    datetimestr = parse(str(k))
    text = datetime.datetime.strftime(datetimestr, form)
    l.append(text)
  return l

def dateCleanse(date):
  l = []
  for k in date :
    if(len(k)==8):
      #a = k.split('-')
      #a = a.reverse()
      d = '20'+k
      l.append(d)
    else:
      if(len(k)==9):
        a = k.split('-')        
        d = a[0]+'-'+a[1]+'-0'+a[2]
        l.append(d)
      else:
        if(len(k)==19):
          a = k.split()
          d = a[0]
          l.append(d)
        else:
          if(len(k)==10):
            if(k.find('/')):
              d = k.replace('/','-')
            l.append(d)
  return l


#lista = ['20-11-02','20-11-03','2020-09-9','2020-09-1','2020-08-05 00:00:00','2020/10/24']
#dateCleanse(df2020['fecha'].values)

def dateCleanse2(date):
  l = []
  for k in date :
    a = k.split('/')
    d = '20'+a[2]+'-'+a[1]+'-'+a[0]
    l.append(d)    
  return l

"""data sources"""

df2019 = pd.read_csv("https://cdn.buenosaires.gob.ar/datosabiertos/datasets/ausa/flujo-vehicular-por-radares-ausa/flujo-vehicular-por-radares-2019.csv")

colNames = df2019.columns

df2020 = pd.read_csv("https://cdn.buenosaires.gob.ar/datosabiertos/datasets/ausa/flujo-vehicular-por-radares-ausa/flujo-vehicular-por-radares-2020.csv", delimiter=",")

df2020['fecha'] = dateCleanse(df2020['fecha'].values)
df2020.columns = df2019.columns

df2021 = pd.read_csv("https://cdn.buenosaires.gob.ar/datosabiertos/datasets/ausa/flujo-vehicular-por-radares-ausa/flujo-vehicular-por-radares-2021.csv", delimiter=",")

df2021.drop('Hora de H_Fecha', axis=1, inplace=True)
df2021.dropna(inplace=True)

df2021['Disp Ubicacion'] =replacer(df2021['Disp Ubicacion'].values)
df2021['Disp Lat'] = replacer(df2021['Disp Lat'].values)
df2021['Disp Lng'] = replacer(df2021['Disp Lng'].values)

df2021.columns = colNames

df2022 = pd.read_csv("https://cdn.buenosaires.gob.ar/datosabiertos/datasets/ausa/flujo-vehicular-por-radares-ausa/flujo-vehicular-por-radares-2022.csv", delimiter=";")

df2022['Disp Ubicacion'] = replacer(df2022['Disp Ubicacion'].values)
df2022['Disp Lat'] = replacer(df2022['Disp Lat'].values)
df2022['Disp Lng'] = replacer(df2022['Disp Lng'].values)

df2022.columns = colNames

df2022['fecha'] = dateCleanse2(df2022['fecha'])

"""Dataprep"""

df2019['fecha'] = clean_date(df2019['fecha'].values, '%Y-%m-%d')
df2019['fecha'] = pd.to_datetime(df2019['fecha'])
df2019.dtypes

df2020['fecha'] = clean_date(df2020['fecha'].values, '%Y-%m-%d')
df2020['fecha'] = pd.to_datetime(df2020['fecha'])
df2020.dtypes

df2021['fecha'] = clean_date(df2021['fecha'].values, '%Y-%m-%d')
df2021['fecha'] = pd.to_datetime(df2021['fecha'])
df2021.dtypes

df2022['fecha'] = clean_date(df2022['fecha'].values, '%Y-%m-%d')
df2022['fecha'] = pd.to_datetime(df2022['fecha'])
df2021.dtypes

df = pd.concat([df2022, df2021, df2020, df2019])
df.reset_index(inplace=True)
#df.sort_values(by='fecha')

df.drop("index",axis=1,inplace=True)

df['fecha']

'''
base_url="https://cdn.buenosaires.gob.ar/datosabiertos/datasets/ausa/flujo-vehicular-por-radares-ausa/flujo-vehicular-por-radares-20"
df = pd.DataFrame()
for k in range(19,23,1):
  url=base_url+str(k)+".csv"
  if k < 22:
    df.append(pd.read_csv(url, delimiter=","), ignore_index=True)
  else:
    df.append(pd.read_csv(url, delimiter=";"), ignore_index=True)
df
'''

"""# EDA"""

import matplotlib.pyplot as plt
import matplotlib

pd.set_option("display.max_rows", 100)

import copy
dfEDA = copy.deepcopy(df)
dfEDA.dtypes

dfEDA['hora'] = dfEDA['hora'].astype(int)
dfEDA['hora']

dfEDA = dfEDA.sort_values(by='fecha', ascending=True)
dfEDA['fecha'] = dfEDA['fecha'].dt.to_period('M')
dfEDA

dfModel = dfEDA.groupby(by=['fecha'])['cantidad'].sum()

dfModel = pd.DataFrame(data=dfModel.values, columns=['tráfico'], index=dfModel.index)

fig, ax = plt.subplots(figsize=(15, 10))
ax.plot(dfModel.index.strftime('%Y-%m'), dfModel.values)
fig.autofmt_xdate()
ax.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))
plt.show()

dfModel.size

dfEDA.groupby(by=['autopista_nombre','seccion_sentido'])['cantidad'].sum().plot.bar(legend=True, figsize=(15,10), title='Tráfico Avenida/Sentido')

dfEDA = dfEDA.sort_values(by='hora', ascending=True)
dfEDA

dfEDA[dfEDA['fecha']=='2022'].groupby(by=['autopista_nombre','hora'])['cantidad'].mean().plot.bar(legend=True,figsize=(20,10))

aux['autopista_nombre'].unique()

aux = pd.DataFrame(dfEDA[dfEDA['fecha']=='2020'].groupby(by=['autopista_nombre','hora'])['cantidad'].sum())
aux.reset_index(inplace=True)

fig, axs = plt.subplots(4, figsize=(20, 15))
fig.suptitle('Tràfico x autopista/hora')

n=0
for k in aux['autopista_nombre'].unique() :
  axs[n].plot(aux[aux['autopista_nombre']==k]['hora'].values, aux[aux['autopista_nombre']==k]['cantidad'].values)
  axs[n].set_title(k)
  n+=1

dfEDA.describe()

dfEDA['disp_ubicacion'].corr(dfEDA['cantidad'])

dfEDA['hora'].corr(dfEDA['cantidad'])

import matplotlib.pyplot as plt
plt.scatter(dfEDA['lat'].values, dfEDA['long'].values, c=dfEDA['cantidad'].values)
plt.colorbar()
plt.show()

dfEDA['autopista_nombre'].unique()

import matplotlib.pyplot as plt
fig = plt.figure()
fig, axes = plt.subplots(figsize=(15,10))
nom_avenida = "AU Dellepiane" #@param ["AU 4  Lugones", "AU 5 Cantilo", "AU Dellepiane", "AU 9 de Julio Sur", "AU 7 Campora"]
plt.scatter(dfEDA[dfEDA['autopista_nombre']==nom_avenida]['lat'].values, dfEDA[dfEDA['autopista_nombre']==nom_avenida]['long'].values, c=dfEDA[dfEDA['autopista_nombre']==nom_avenida]['cantidad'].values)
plt.colorbar()
plt.show()

fig = plt.figure()    
fig, axes = plt.subplots(nrows = 3, ncols = 2, sharex=True, sharey = True, figsize=(15,10))

axes[0][0].scatter(dfEDA[dfEDA['autopista_nombre']=='AU 4  Lugones']['lat'].values, dfEDA[dfEDA['autopista_nombre']=='AU 4  Lugones']['long'].values, c=dfEDA[dfEDA['autopista_nombre']=='AU 4  Lugones']['cantidad'].values)
axes[0][0].set_xlabel('Squares', labelpad = 5)

axes[0][1].scatter(dfEDA[dfEDA['autopista_nombre']=='AU 5 Cantilo']['lat'].values, dfEDA[dfEDA['autopista_nombre']=='AU 5 Cantilo']['long'].values, c=dfEDA[dfEDA['autopista_nombre']=='AU 5 Cantilo']['cantidad'].values)
axes[0][1].set_xlabel('Squares', labelpad = 5)

axes[1][0].scatter(dfEDA[dfEDA['autopista_nombre']=='AU Dellepiane']['lat'].values, dfEDA[dfEDA['autopista_nombre']=='AU Dellepiane']['long'].values, c=dfEDA[dfEDA['autopista_nombre']=='AU Dellepiane']['cantidad'].values)
axes[1][0].set_xlabel('Squares')

axes[1][1].scatter(dfEDA[dfEDA['autopista_nombre']=='AU 9 de Julio Sur']['lat'].values, dfEDA[dfEDA['autopista_nombre']=='AU 9 de Julio Sur']['long'].values, c=dfEDA[dfEDA['autopista_nombre']=='AU 9 de Julio Sur']['cantidad'].values)
axes[1][1].set_xlabel('Squares')

axes[2][0].scatter(dfEDA[dfEDA['autopista_nombre']=='AU 7 Campora']['lat'].values, dfEDA[dfEDA['autopista_nombre']=='AU 7 Campora']['long'].values, c=dfEDA[dfEDA['autopista_nombre']=='AU 7 Campora']['cantidad'].values)
axes[2][0].set_xlabel('Squares')

plt.show()

dfMAP = dfEDA[['fecha','autopista_nombre','lat','long','cantidad']]

import matplotlib.pyplot as plt
import pandas as pd
import geopandas as gpd
import geopandas

comunas = gpd.read_file('ba_comunas.shp')

comunas.set_crs('epsg:4326')

comunas.plot(edgecolor='black')

!pip install shapely

from shapely.geometry import Point

geometry = [Point(xy) for xy in zip(dfMAP['long'],dfMAP['lat'])]

crs = {'init':'epsg:4326'}

gdfDisp = gpd.GeoDataFrame(dfMAP, crs=crs, geometry=geometry)

gdfDisp.head()

gdfDisp[gdfDisp['autopista_nombre']=='AU 5 Cantilo']

fig, ax = plt.subplots(figsize=(10,10))
comunas.plot(ax=ax, edgecolor='black', alpha=0.35, color='gray')
gdfDisp.plot(ax=ax, color='red')

"""# Forecasting with ARIMA

## Install libraries (DRAFT)
"""

!pip install pystan==2.19.1.1
!pip install prophet
!pip3 install torch torchvision
!pip install darts

"""Cross dependencies"""

!pip3 install -U fbprophet

!pip uninstall fbprophet --yes
!pip install cmdstanpy==0.9.68
!pip install pystan==2.19.1.1
!pip install prophet

!pip install pyyaml==5.4.1

!pip install pmdarima

"""## AutoARIMA Test"""

from pmdarima import auto_arima

stepwise_fit = auto_arima(dfModel, trace=True)

stepwise_fit.order

from darts.models import ARIMA
from darts import TimeSeries

series = TimeSeries.from_values(dfModel.values)
size=dfModel.values.size-1

train, val = series[-size:], series[:-size]

model = ARIMA(stepwise_fit.order[0], stepwise_fit.order[1], stepwise_fit.order[2])

model.fit(train)

model.backtest()

prediction = model.predict(n=1, num_samples=1)

prediction.all_values().tolist()

!python -m pip uninstall matplotlib --yes
!pip install matplotlib==3.1.3

from matplotlib import pyplot as plt

series.plot()
prediction.plot(new_plot=False,label='forecast', low_quantile=0.05, high_quantile=0.95)
plt.legend()